openapi: 3.0.3
info:
  title: Household Detail API
  version: 1.0.0
  description: API for household detail view with inline editing

paths:
  /api/households/{householdId}:
    get:
      summary: Get household with all related data
      operationId: getHouseholdDetail
      parameters:
        - name: householdId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Household details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HouseholdDetail'
        '404':
          description: Household not found

    patch:
      summary: Update household fields
      operationId: updateHousehold
      parameters:
        - name: householdId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdUpdate'
      responses:
        '200':
          description: Household updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Household'
        '409':
          description: Concurrent update conflict

  /api/households/{householdId}/people:
    get:
      summary: List all people in household
      operationId: getHouseholdPeople
      parameters:
        - name: householdId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: People list retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonWithContacts'

    post:
      summary: Add new person to household
      operationId: addPersonToHousehold
      parameters:
        - name: householdId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreate'
      responses:
        '201':
          description: Person created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonWithContacts'
        '400':
          description: Validation error

  /api/people/{personId}:
    patch:
      summary: Update person details
      operationId: updatePerson
      parameters:
        - name: personId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonUpdate'
      responses:
        '200':
          description: Person updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonWithContacts'
        '400':
          description: Validation error
        '409':
          description: Concurrent update conflict

    delete:
      summary: Remove person from household
      operationId: deletePerson
      parameters:
        - name: personId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Person deleted successfully
        '400':
          description: Cannot delete last person in household
        '404':
          description: Person not found

  /api/people/{personId}/contacts:
    put:
      summary: Replace all contacts for a person
      operationId: updatePersonContacts
      parameters:
        - name: personId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ContactInput'
      responses:
        '200':
          description: Contacts updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '400':
          description: Validation error

  /api/households/{householdId}/animals:
    get:
      summary: List animals associated with household
      operationId: getHouseholdAnimals
      parameters:
        - name: householdId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Animals list retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'

components:
  schemas:
    Household:
      type: object
      required:
        - id
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 100
        address:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        postal_code:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    HouseholdDetail:
      allOf:
        - $ref: '#/components/schemas/Household'
        - type: object
          properties:
            people:
              type: array
              items:
                $ref: '#/components/schemas/PersonWithContacts'
            animals:
              type: array
              items:
                $ref: '#/components/schemas/Animal'

    HouseholdUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        address:
          type: string
        city:
          type: string
        postal_code:
          type: string
        updated_at:
          type: string
          format: date-time
          description: For optimistic locking

    Person:
      type: object
      required:
        - id
        - household_id
        - first_name
        - last_name
        - is_primary
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        household_id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        is_primary:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PersonWithContacts:
      allOf:
        - $ref: '#/components/schemas/Person'
        - type: object
          properties:
            contacts:
              type: array
              items:
                $ref: '#/components/schemas/Contact'

    PersonCreate:
      type: object
      required:
        - first_name
        - last_name
      properties:
        first_name:
          type: string
        last_name:
          type: string
        is_primary:
          type: boolean
          default: false
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ContactInput'

    PersonUpdate:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        is_primary:
          type: boolean
        updated_at:
          type: string
          format: date-time
          description: For optimistic locking

    Contact:
      type: object
      required:
        - id
        - person_id
        - type
        - value
        - created_at
      properties:
        id:
          type: string
          format: uuid
        person_id:
          type: string
          format: uuid
        type:
          type: string
          enum: [phone, email, mobile, work]
        value:
          type: string
        created_at:
          type: string
          format: date-time

    ContactInput:
      type: object
      required:
        - type
        - value
      properties:
        type:
          type: string
          enum: [phone, email, mobile, work]
        value:
          type: string

    Animal:
      type: object
      required:
        - id
        - name
        - species
        - status
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        species:
          type: string
        breed:
          type: string
          nullable: true
        date_of_birth:
          type: string
          format: date
          nullable: true
        age:
          type: string
          description: Computed from date_of_birth
        status:
          type: string
          enum: [active, inactive]